// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.26.1
// source: gateway/proto/gateway.proto

package proto

import (
	context "context"
	proto1 "github.com/deadshvt/flight-booking-system/bonus-service/proto"
	proto "github.com/deadshvt/flight-booking-system/flight-service/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Gateway_GetFlightsWithAirports_FullMethodName  = "/gateway.Gateway/GetFlightsWithAirports"
	Gateway_GetPrivilegeWithHistory_FullMethodName = "/gateway.Gateway/GetPrivilegeWithHistory"
	Gateway_GetMe_FullMethodName                   = "/gateway.Gateway/GetMe"
	Gateway_GetTicketsWithAirports_FullMethodName  = "/gateway.Gateway/GetTicketsWithAirports"
	Gateway_GetTicketWithAirports_FullMethodName   = "/gateway.Gateway/GetTicketWithAirports"
	Gateway_PurchaseTicket_FullMethodName          = "/gateway.Gateway/PurchaseTicket"
	Gateway_ReturnTicket_FullMethodName            = "/gateway.Gateway/ReturnTicket"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetFlightsWithAirports(ctx context.Context, in *proto.GetFlightsWithAirportsRequest, opts ...grpc.CallOption) (*proto.GetFlightsWithAirportsResponse, error)
	GetPrivilegeWithHistory(ctx context.Context, in *proto1.GetPrivilegeWithHistoryRequest, opts ...grpc.CallOption) (*proto1.GetPrivilegeWithHistoryResponse, error)
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error)
	GetTicketsWithAirports(ctx context.Context, in *GetTicketsWithAirportsRequest, opts ...grpc.CallOption) (*GetTicketsWithAirportsResponse, error)
	GetTicketWithAirports(ctx context.Context, in *GetTicketWithAirportsRequest, opts ...grpc.CallOption) (*GetTicketWithAirportsResponse, error)
	PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*PurchaseTicketResponse, error)
	ReturnTicket(ctx context.Context, in *ReturnTicketRequest, opts ...grpc.CallOption) (*ReturnTicketResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetFlightsWithAirports(ctx context.Context, in *proto.GetFlightsWithAirportsRequest, opts ...grpc.CallOption) (*proto.GetFlightsWithAirportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto.GetFlightsWithAirportsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetFlightsWithAirports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPrivilegeWithHistory(ctx context.Context, in *proto1.GetPrivilegeWithHistoryRequest, opts ...grpc.CallOption) (*proto1.GetPrivilegeWithHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(proto1.GetPrivilegeWithHistoryResponse)
	err := c.cc.Invoke(ctx, Gateway_GetPrivilegeWithHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*GetMeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMeResponse)
	err := c.cc.Invoke(ctx, Gateway_GetMe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTicketsWithAirports(ctx context.Context, in *GetTicketsWithAirportsRequest, opts ...grpc.CallOption) (*GetTicketsWithAirportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicketsWithAirportsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetTicketsWithAirports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTicketWithAirports(ctx context.Context, in *GetTicketWithAirportsRequest, opts ...grpc.CallOption) (*GetTicketWithAirportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicketWithAirportsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetTicketWithAirports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) PurchaseTicket(ctx context.Context, in *PurchaseTicketRequest, opts ...grpc.CallOption) (*PurchaseTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseTicketResponse)
	err := c.cc.Invoke(ctx, Gateway_PurchaseTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) ReturnTicket(ctx context.Context, in *ReturnTicketRequest, opts ...grpc.CallOption) (*ReturnTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReturnTicketResponse)
	err := c.cc.Invoke(ctx, Gateway_ReturnTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetFlightsWithAirports(context.Context, *proto.GetFlightsWithAirportsRequest) (*proto.GetFlightsWithAirportsResponse, error)
	GetPrivilegeWithHistory(context.Context, *proto1.GetPrivilegeWithHistoryRequest) (*proto1.GetPrivilegeWithHistoryResponse, error)
	GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error)
	GetTicketsWithAirports(context.Context, *GetTicketsWithAirportsRequest) (*GetTicketsWithAirportsResponse, error)
	GetTicketWithAirports(context.Context, *GetTicketWithAirportsRequest) (*GetTicketWithAirportsResponse, error)
	PurchaseTicket(context.Context, *PurchaseTicketRequest) (*PurchaseTicketResponse, error)
	ReturnTicket(context.Context, *ReturnTicketRequest) (*ReturnTicketResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetFlightsWithAirports(context.Context, *proto.GetFlightsWithAirportsRequest) (*proto.GetFlightsWithAirportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightsWithAirports not implemented")
}
func (UnimplementedGatewayServer) GetPrivilegeWithHistory(context.Context, *proto1.GetPrivilegeWithHistoryRequest) (*proto1.GetPrivilegeWithHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivilegeWithHistory not implemented")
}
func (UnimplementedGatewayServer) GetMe(context.Context, *GetMeRequest) (*GetMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedGatewayServer) GetTicketsWithAirports(context.Context, *GetTicketsWithAirportsRequest) (*GetTicketsWithAirportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketsWithAirports not implemented")
}
func (UnimplementedGatewayServer) GetTicketWithAirports(context.Context, *GetTicketWithAirportsRequest) (*GetTicketWithAirportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketWithAirports not implemented")
}
func (UnimplementedGatewayServer) PurchaseTicket(context.Context, *PurchaseTicketRequest) (*PurchaseTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseTicket not implemented")
}
func (UnimplementedGatewayServer) ReturnTicket(context.Context, *ReturnTicketRequest) (*ReturnTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnTicket not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetFlightsWithAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.GetFlightsWithAirportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetFlightsWithAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetFlightsWithAirports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetFlightsWithAirports(ctx, req.(*proto.GetFlightsWithAirportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPrivilegeWithHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.GetPrivilegeWithHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPrivilegeWithHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetPrivilegeWithHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPrivilegeWithHistory(ctx, req.(*proto1.GetPrivilegeWithHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTicketsWithAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketsWithAirportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTicketsWithAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetTicketsWithAirports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTicketsWithAirports(ctx, req.(*GetTicketsWithAirportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTicketWithAirports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketWithAirportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTicketWithAirports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetTicketWithAirports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTicketWithAirports(ctx, req.(*GetTicketWithAirportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_PurchaseTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).PurchaseTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_PurchaseTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).PurchaseTicket(ctx, req.(*PurchaseTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_ReturnTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).ReturnTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_ReturnTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).ReturnTicket(ctx, req.(*ReturnTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlightsWithAirports",
			Handler:    _Gateway_GetFlightsWithAirports_Handler,
		},
		{
			MethodName: "GetPrivilegeWithHistory",
			Handler:    _Gateway_GetPrivilegeWithHistory_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _Gateway_GetMe_Handler,
		},
		{
			MethodName: "GetTicketsWithAirports",
			Handler:    _Gateway_GetTicketsWithAirports_Handler,
		},
		{
			MethodName: "GetTicketWithAirports",
			Handler:    _Gateway_GetTicketWithAirports_Handler,
		},
		{
			MethodName: "PurchaseTicket",
			Handler:    _Gateway_PurchaseTicket_Handler,
		},
		{
			MethodName: "ReturnTicket",
			Handler:    _Gateway_ReturnTicket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway/proto/gateway.proto",
}
